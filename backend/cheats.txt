---------------- BCRYPT --------------------------

bcrypt is a library used in software development for securely hashing and verifying passwords. 
Its main purpose is to enhance security by ensuring that user passwords are stored in a way that minimizes the risk of exposure, even if the database is compromised.


const hashPassword = async (password) => {
    const saltRounds = 10;
    return await bcrypt.hash(password, saltRounds);
};


const newAdmin = new AdminModel({
            name,
            email,
            password: hashedPassword, // Store hashed password
});


Function           Purpose                           Sync/Async   Returns
bcrypt.hash        Hash a password                   Async        Hash (in callback)
bcrypt.hashSync    Hash a password                   Sync         Hash
bcrypt.compare     Compare plain password & hash     Async        Boolean (in callback)
bcrypt.compareSync Compare plain password & hash     Sync         Boolean
bcrypt.genSalt     Generate salt                     Async        Salt (in callback)
bcrypt.genSaltSync Generate salt                     Sync         Salt

When you pass the saltRounds as the second argument, bcrypt.hash() will automatically generate the salt for you and use it to hash the password.
saltRounds represents the number of rounds the hashing algorithm should run. A higher number of rounds will make the hashing process more secure but also slower.

1>----------------bcrypt.hash ------------------

bcrypt.hash(plainTextPassword, saltRounds, (err, hash) => {
    if (err) throw err;
    console.log("Hashed password:", hash);
});


2>---------------bcrypt.hashSync ----------------

const hashedPassword = bcrypt.hashSync(plainTextPassword, saltRounds);
console.log("Hashed password:", hashedPassword);


3>---------------bcrypt.compare -----------------

bcrypt.compare(plainTextPassword, hash, (err, result) => {
    if (err) throw err;
    console.log("Do they match?", result);
});

or 

const isMatch=await bcrypt.compare(plainTextPassword, hash);
console.log("Do they match?", isMatch);
you can use await directly without using callback.


4>---------------bcrypt.compareSync---------------

const isMatch = bcrypt.compareSync(plainTextPassword, hash);
console.log("Do they match?", isMatch);


5>---------------bcrypt.genSalt ------------------

bcrypt.genSalt(saltRounds, (err, salt) => {
    if (err) throw err;
    console.log("Generated salt:", salt);
});


6>---------------bcrypt.genSaltSync -------------- 

const salt = bcrypt.genSaltSync(saltRounds);
console.log("Generated salt:", salt);



